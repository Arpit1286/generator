package com.cloudwick.generator.retail

import java.util.concurrent.atomic.AtomicLong
import java.util.concurrent.{Executors, ExecutorService}

import com.cloudwick.generator.utils.{DateUtils, Utils, LazyLogging}

class ConcurrentWriter(config: OptionsConfig) extends Runnable with LazyLogging {
  val utils = new Utils
  val dateUtils = new DateUtils
  val threadPool: ExecutorService = Executors.newFixedThreadPool(config.threadPoolSize)
  val finalCounter: AtomicLong = new AtomicLong(0L)
  val finalBytesCounter: AtomicLong = new AtomicLong(0L)
  // get the sunday as the start date
  val startDate = dateUtils.getSundayInWeek(config.startDate)
  val endDate = dateUtils.parseLocalDate(config.endDate)
  val totalDays = dateUtils.getDates(startDate, endDate)
  val totalEvents = config.storesCount * config.productsCount * totalDays
  val storesPerThread: Int = config.storesCount / config.threadsCount
  val storesRange = Range(0, config.storesCount, storesPerThread)

  def run() = {
    utils.time(s"Generating ${ totalEvents } events") {
      try {
        (1 to config.threadsCount).foreach { threadCount =>
          logger.debug("Initializing thread: '{}'", Thread.currentThread().getName)
          threadPool.execute(
            new Writer(
              storesRange(threadCount - 1),
              storesRange(threadCount - 1) + (storesPerThread - 1),
              startDate,
              endDate,
              totalDays,
              finalCounter,
              finalBytesCounter,
              config
            )
          )
        }
      } catch {
        case e: Exception => logger.error("Error: {}", e.printStackTrace())
      } finally {
        threadPool.shutdown()
      }
      while(!threadPool.isTerminated) {
        logger.trace("Sleeping for 10 seconds...")
        Thread.sleep(10 * 1000)
        logger.info("Events generated: {}, size: '{}' bytes", finalCounter, finalBytesCounter.longValue())
      }
      logger.info("Total events generated by {} thread(s): {}", config.threadsCount, finalCounter)
    }
  }
}
